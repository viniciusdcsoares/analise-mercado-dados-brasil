# %% [1] Importando os pacotes e carregando os dados, etc
# Importando pacotes
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import plotly as pt
import plotly.express as px
import plotly.graph_objects as go

# Carregando dados
from funcoes.funcoes import TratamentoDados

tratador = TratamentoDados()

df_migracao, salarios = tratador.retornar_migracao()

# %% T√≠tulo, e settings

st.markdown("""
    <div style="text-align: center;">
        <h1> Gr√°ficos da An√°lise Regional </h1>
""", unsafe_allow_html=True)

st.markdown("""

""")

gradientes = {
    'Rosa': 'PuRd',       # Cores vermelhas
    'Laranja': 'Oranges', # Cores laranja
    'Tomate': 'Reds',     # Cores tomate
    'Verde': 'Greens',    # Cores verdes
    'Azul': 'Blues',      # Cores azuis
    'Cinza': 'Greys'      # Cores cinzas
}

# Sidebar para escolha da cor
with st.sidebar.expander("Escolha as cores para os gr√°ficos üé®", expanded=True):
    cor_nome = st.selectbox('Escolha uma cor de prefer√™ncia:',
                           ['Rosa', 'Laranja', 'Tomate', 'Verde', 'Azul', 'Cinza'])
    cor_gradiente = gradientes[cor_nome]

# Templates carregados - For√ßando o uso do template correto da sess√£o
if "template_graph" in st.session_state and st.session_state.template_graph is not None:
    template_graph = st.session_state.template_graph
else:
    template_graph = "black"  # Default para tema escuro
    
if "template_plotly" in st.session_state and st.session_state.template_plotly is not None:
    template_plotly = st.session_state.template_plotly
else:
    template_plotly = "plotly_dark"  # Default para tema escuro
    
if "template_graph_texto" in st.session_state and st.session_state.template_graph_texto is not None:
    template_graph_texto = st.session_state.template_graph_texto
else:
    template_graph_texto = "white"  # Default para tema escuro

if "template_plotly_mapa" in st.session_state and st.session_state.template_plotly_mapa is not None:
    template_plotly_mapa = st.session_state.template_plotly_mapa
else:
    template_plotly_mapa = "plotly_dark"  # Default para tema escuro

# Debug das vari√°veis de tema    
st.sidebar.markdown("### Configura√ß√µes de tema")
st.sidebar.write(f"Tema Plotly: {template_plotly}")
st.sidebar.write(f"Tema Plotly mapa: {template_plotly_mapa}")
st.sidebar.write(f"Tema Graph: {template_graph}")
st.sidebar.write(f"Tema Texto: {template_graph_texto}")

if template_graph == "white":
    letras_sns = "black"

else:
    letras_sns = "white"

# %% Grafico 1 de salario:
    
fig = px.choropleth(
    salarios,
    geojson="https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson",
    locations="Sigla onde mora",  
    featureidkey="properties.sigla",  
    color='Salarios',
    scope='asia', # Necessario para nao "puxar" o mapa da america do sul inteiro
    color_continuous_scale=cor_gradiente#,
    #title=f'Quantidade de profissionais que migraram de f{va_estado}'
)

fig.update_layout(
        coloraxis_colorbar=dict(title="Contagem"),
        geo=dict(scope="asia" # Necessario para nao "puxar" o mapa da america do sul
        ),
    )
    
    # "visible" impede de ampliar o mapa e ver a asia
    # e fitbounds garante que apenas os locais com dados aparecer√£o
fig.update_geos(fitbounds="locations", visible=False)
fig.update_layout(width=1000, height=700, 
                       template=template_plotly_mapa,
                       paper_bgcolor=template_graph,
                       plot_bgcolor=template_graph,
                       coloraxis_colorbar=dict(
                           tickfont=dict(color=template_graph_texto)  # Cor dos n√∫meros na barra de cores
                           #titlefont=dict(color=template_graph_texto)  # Cor do t√≠tulo da barra de cores
                           ))

st.markdown(f"<h3 style='text-align: center'> ü§ë Mapa do Sal√°rio M√©dio por Regi√£o üí∏ </h3>", unsafe_allow_html=True)
st.plotly_chart(fig)

# %% dicionario(s)

dic_uni2 = {
        "Regi√£o de Migra√ß√£o": (
        "A tabela revela a distribui√ß√£o dos profissionais por regi√£o de origem e localiza√ß√£o atual, mostrando uma forte concentra√ß√£o nas regi√µes mais desenvolvidas do Brasil. "
        "A regi√£o Sudeste destaca-se com a maior quantidade de profissionais, com 121 oriundos dessa regi√£o e 235 de outras. Isso sugere que o Sudeste √© um polo central tanto "
        "para a origem quanto para a atual localiza√ß√£o dos profissionais, atraindo um grande n√∫mero de talentos de diversas partes do pa√≠s. Al√©m disso, o Sudeste √© tamb√©m a "
        "principal regi√£o de destino, com destaque para profissionais provenientes de Nordeste e Centro-Oeste.<br><br>"
        
        "O Nordeste tem uma distribui√ß√£o mais equilibrada, com 29 profissionais oriundos da pr√≥pria regi√£o e 135 de outras √°reas. Isso demonstra uma migra√ß√£o consider√°vel para o "
        "Nordeste, que pode ser explicada por fatores como o crescimento de setores e a busca por novas oportunidades nesse territ√≥rio. J√° o Sul tem uma distribui√ß√£o similar, "
        "com 81 profissionais atualmente na regi√£o e 58 oriundos de outros locais. A presen√ßa de profissionais do Centro-Oeste na regi√£o Sul tamb√©m indica um movimento migrat√≥rio, "
        "possivelmente em busca de melhores oportunidades de trabalho.<br><br>"
        
        "Por outro lado, as regi√µes Centro-Oeste e Norte mostram uma concentra√ß√£o maior de profissionais locais. O Centro-Oeste tem 22 profissionais em sua pr√≥pria regi√£o e "
        "12 oriundos de outras √°reas, enquanto o Norte tem 17 na regi√£o e 16 provenientes de outras. Essas duas regi√µes tendem a manter uma maior parte de sua for√ßa de trabalho "
        "local, com uma mobilidade migrat√≥ria mais baixa. A regi√£o Exterior tem uma representa√ß√£o menor, com destaque para a presen√ßa de profissionais provenientes do Sudeste e "
        "Nordeste."
        ),
    }
            
# %% graficos

st.markdown("""
    <div style="text-align: center;">
        <h1> ‚úàÔ∏è Mapa de Calor das Migra√ß√µes ‚úàÔ∏è </h1>
""", unsafe_allow_html=True)

if 'pregui√ßa' == 'pregui√ßa':
    tabela_migracao = pd.crosstab(df_migracao['Regi√£o de Origem'], df_migracao['Regi√£o Atual'])

    # Normalize the table to get proportions
    tabela_migracao_proporcional = tabela_migracao.div(tabela_migracao.sum(axis=1), axis=0)

    # Let the user choose between Propor√ß√£o and N√∫meros Absolutos
    opcao_selecao = st.radio('Escolha a vers√£o para visualiza√ß√£o:', 
                             ('Propor√ß√£o', 'N√∫meros Absolutos'))

    # Conditional logic to set the table to display based on the user choice
    if opcao_selecao == 'Propor√ß√£o':
        tabela_exibicao = tabela_migracao_proporcional
        titulo_grafico = 'Regi√£o de Origem vs Regi√£o Atual (Propor√ß√£o)'
        fmt = ".2f"  # Format for proportions
    else:
        tabela_exibicao = tabela_migracao
        titulo_grafico = 'Regi√£o de Origem vs Regi√£o Atual (Contagem)'
        fmt = "d"  # Format for absolute counts
    
    # Create the heatmap
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(tabela_exibicao, annot=True, cmap=cor_gradiente, fmt=fmt, ax=ax)
    
    # Customize labels and font sizes
    ax.set_title(titulo_grafico, fontsize=16, color=letras_sns)
    ax.set_xlabel('Regi√£o Atual', fontsize=12, color=letras_sns)
    ax.set_ylabel('Regi√£o de Origem', fontsize=12, color=letras_sns)
    ax.tick_params(axis='x', colors=letras_sns)  # x-axis ticks color
    ax.tick_params(axis='y', colors=letras_sns)  # y-axis ticks color
    fig.patch.set_facecolor(template_graph)  # Set background color to black
    
    # Show the plot
    st.pyplot(fig)


    #st.subheader('Tabela de Migra√ß√£o entre Regi√µes')
    #st.write(tabela_migracao)
    st.markdown(dic_uni2['Regi√£o de Migra√ß√£o'], unsafe_allow_html=True)

estados_brasil = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 
                  'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']

va_estado = st.selectbox('Escolha um estado para o gr√°fico:', (estados_brasil))

# Filtrando os dados por estado escolihdo
para_estado = df_migracao[df_migracao["Sigla onde mora"] == va_estado]
do_estado = df_migracao[df_migracao["Sigla de origem"] == va_estado]

contagem_para_estado = para_estado["Sigla de origem"].value_counts().reset_index()
contagem_do_estado = do_estado["Sigla onde mora"].value_counts().reset_index()

todos_estados_df = pd.DataFrame({'Sigla de origem': estados_brasil})
todos_estados_df["Sigla onde mora"] = todos_estados_df["Sigla de origem"]

#
contagem_completa_para_estado = pd.merge(todos_estados_df, contagem_para_estado, on="Sigla de origem", how="left")
contagem_completa_do_estado = pd.merge(todos_estados_df, contagem_do_estado, on="Sigla onde mora", how="left")

# Substituir na por 1 para plotagem
contagem_completa_para_estado['count'] = contagem_completa_para_estado['count'].fillna(0)
contagem_completa_do_estado['count'] = contagem_completa_do_estado['count'].fillna(0)


# Criar o gr√°fico de choropleth
fig1 = px.choropleth(
    contagem_completa_para_estado,
    geojson="https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson",
    locations="Sigla de origem",  
    featureidkey="properties.sigla",  
    color='count',
    scope='asia', # Necessario para nao "puxar" o mapa da america do sul inteiro
    color_continuous_scale=cor_gradiente#,
    #title=f'Quantidade de profissionais que migraram para {va_estado}'
)

fig2 = px.choropleth(
    contagem_completa_do_estado,
    geojson="https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson",
    locations="Sigla onde mora",  
    featureidkey="properties.sigla",  
    color='count',
    scope='asia', # Necessario para nao "puxar" o mapa da america do sul inteiro
    color_continuous_scale=cor_gradiente#,
    #title=f'Quantidade de profissionais que migraram de f{va_estado}'
)

for fig in [fig1, fig2]:
    fig.update_layout(
        coloraxis_colorbar=dict(
            title="Contagem",
            len=0.5,  # Reduzir o tamanho da barra de cores para 50% do padr√£o
            thickness=15,  # Reduzir a espessura da barra
            x=0.95,  # Posicionar mais √† direita
            tickfont=dict(color=template_graph_texto, size=8)  # Fonte menor
        ),
        geo=dict(
            scope="asia",  # Necessario para nao "puxar" o mapa da america do sul
            projection_scale=5,  # Aumentar a escala do mapa
            center=dict(lat=-15, lon=-55),  # Centrar o mapa no Brasil
            lonaxis=dict(range=[-75, -30]),  # Ajustar longitude para focar mais no Brasil
            lataxis=dict(range=[-35, 5])  # Ajustar latitude para focar mais no Brasil
        ),
    )
    
    # "visible" impede de ampliar o mapa e ver a asia
    # e fitbounds garante que apenas os locais com dados aparecem
    fig.update_geos(fitbounds="locations", visible=False)
    fig.update_layout(
        width=800, 
        height=800, 
        template=template_plotly_mapa,
        paper_bgcolor=template_graph,
        plot_bgcolor=template_graph,
        margin=dict(l=0, r=0, t=0, b=0)  # Reduzir margens para maximizar o espa√ßo do mapa
    )

# Criar os gr√°ficos lado a lado usando colunas do Streamlit
st.markdown(f"<h3 style='text-align: center'> ‚úàÔ∏è Mapas de Migra√ß√£o do Estado: {va_estado} ‚úàÔ∏è </h3>", unsafe_allow_html=True)

# Criando container com largura expandida
with st.container():
    # Criando duas colunas para exibir os gr√°ficos lado a lado
    col1, col2 = st.columns(2)
    
    # Colocando os mapas lado a lado
    with col1:
        st.markdown(f"<h4 style='text-align: center'> üõ¨ Migra√ß√µes PARA {va_estado} </h4>", unsafe_allow_html=True)
        st.plotly_chart(fig1, use_container_width=True)
    
    with col2:
        st.markdown(f"<h4 style='text-align: center'> üõ´ Migra√ß√µes DE {va_estado} </h4>", unsafe_allow_html=True)
        st.plotly_chart(fig2, use_container_width=True)
