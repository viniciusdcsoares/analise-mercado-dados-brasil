# %% [1] Importando os pacotes e carregando os dados, etc
# Importando pacotes
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import plotly as pt
import plotly.express as px
import plotly.graph_objects as go

from funcoes.funcoes import TratamentoDados
from funcoes.funcoes import grafico_barras_ordenado

tratador = TratamentoDados()

df = tratador.retornar_dados()

# %% T√≠tulo, e settings

st.markdown("""
    <div style="text-align: center;">
        <h1> An√°lise Geral das Viar√°veis </h1>
""", unsafe_allow_html=True)

st.markdown("""
Nessa sec√ß√£o voc√™ pode visualizar alguns 
gr√°ficos, que propomos para a an√°lise 
individual das vari√°veis da base. Al√©m disso, 
fornecemos tamb√©m insights acerca dos 
gr√°ficos gerados, para que voc√™ n√£o 
precise ter esse trabalho. üß†

Tudo o que vai precisar fazer √© selecionar a 
vari√°vel desejada e se divertir com o processo!üôÉ
""")

# Sidebar para escolha da cor
with st.sidebar.expander("üé® Escolha as cores dos gr√°ficos üé®", expanded=True):
    cor = st.color_picker("Escolha uma cor!", "#00f900")
    

# Templates carregados - For√ßando o uso do template correto da sess√£o
if "template_graph" in st.session_state and st.session_state.template_graph is not None:
    template_graph = st.session_state.template_graph
else:
    template_graph = "black"  # Default para tema escuro
    
if "template_plotly" in st.session_state and st.session_state.template_plotly is not None:
    template_plotly = st.session_state.template_plotly
else:
    template_plotly = "plotly_dark"  # Default para tema escuro
    
if "template_graph_texto" in st.session_state and st.session_state.template_graph_texto is not None:
    template_graph_texto = st.session_state.template_graph_texto
else:
    template_graph_texto = "white"  # Default para tema escuro

# %% Gr√°ficos de distribui√ß√£o   

st.markdown("""
    <div style="text-align: center;">
        <h1>üì∂ Gr√°ficos da Distribui√ß√£o de Algumas Vari√°veis üì∂</h1>
""", unsafe_allow_html=True)

variavel_distribuicao = st.selectbox('Escolha uma vari√°vel para an√°lise:',
                                    sorted(['Idade', 'Faixa Salarial', 'Experi√™ncia']))

st.markdown(f"<h3 style='text-align: center'>  Distribui√ß√£o de {variavel_distribuicao}  </h3>", unsafe_allow_html=True)
    
# %%% tratamento para distribuicao

ordem_faixas_resumida = [
            "< 1k", "1k < 2k", "2k < 3k", "3k < 4k", "4k < 6k", "6k < 8k",
            "8k < 12k", "12k < 16k", "16k < 20k", "20k < 25k", "25k < 30k",
            "30k < 40k", "40k <"
        ]
        
ordem_experiencia = [
            "Sem experi√™ncia",
            "Menos de 1 ano",
            "de 1 a 2 anos",
            "de 3 a 4 anos",
            "de 4 a 6 anos",
            "de 7 a 10 anos",
            "Mais de 10 anos"
        ]

df['Faixa Salarial'].value_counts().index.tolist()


# %%% dicionarios de interpreta√ß√£o e etc

dic_distribuicao = {
    "Idade": (
        "A distribui√ß√£o et√°ria dos profissionais no mercado de dados no Brasil mostra uma predomin√¢ncia de jovens na faixa et√°ria de 20 a 30 anos, que representam uma parcela "
        "significativa da base. A maior concentra√ß√£o est√° na faixa de 26 anos, com 323 profissionais (6.1%), seguida pela faixa de 27 anos, com 374 profissionais (7.1%), "
        "indicando uma forte presen√ßa de profissionais em in√≠cio de carreira ou em transi√ß√£o para posi√ß√µes mais consolidadas. As faixas et√°rias mais altas, como 50 anos ou mais, "
        "t√™m uma representatividade bem menor, com apenas 1 a 2 profissionais em cada faixa et√°ria acima de 60 anos, evidenciando uma baixa participa√ß√£o de profissionais mais "
        "velhos no setor. Esse cen√°rio reflete um mercado de dados mais jovem, com a maioria dos profissionais em fases iniciais ou intermedi√°rias de sua carreira."
        ),
    "Faixa Salarial": (
        "A distribui√ß√£o salarial no mercado de dados no Brasil revela uma clara concentra√ß√£o nas faixas intermedi√°rias, com destaque para o intervalo de 8 001 a 12 000 reais, "
        "com 1 026 profissionais, seguido por 4 001 a 6 000 reais, com 745 profissionais, e 12 001 a 16 000 reais, com 650 profissionais. As faixas salariais mais altas, como "
        "16 001 a 20 000 reais (328 profissionais) e Acima de 40 000  reais (72 profissionais), t√™m uma presen√ßa mais modesta, sugerindo que apenas uma pequena parcela dos "
        "profissionais alcan√ßam esses valores. J√° as faixas mais baixas, como Menos de 1 000 reais (30 profissionais), t√™m uma representa√ß√£o reduzida, indicando que a maioria "
        "dos profissionais est√° concentrada nas faixas intermedi√°rias ou mais altas."
        ),
    "Experi√™ncia": (
        "A experi√™ncia tamb√©m √© um fator importante nesse mercado. Cerca de 40% dos profissionais (aproximadamente 2.000 indiv√≠duos) possuem entre 1 e 4 anos de experi√™ncia, "
        "o que mostra que a maior parte da base est√° em fase de forma√ß√£o ou em transi√ß√£o para cargos mais seniores. Esse dado sugere uma alta rotatividade e a constante entrada "
        "de novos profissionais no mercado de dados.<br><br>"
        
        "Outro dado relevante √© que 3% (aproximadamente 160 profissionais) s√£o iniciantes, com nenhuma experi√™ncia formal na √°rea, mas provavelmente com potencial para crescer "
        "√† medida que o mercado se expande e a demanda por dados aumenta.<br><br>"
        
        "Entre os profissionais mais experientes, h√° um equil√≠brio entre as faixas de 4 a 6 anos e 7 a 10 anos de experi√™ncia, com um n√∫mero ligeiramente maior de profissionais "
        "na faixa de 4 a 6 anos. Isso indica uma estabiliza√ß√£o na distribui√ß√£o de experi√™ncia, com uma concentra√ß√£o significativa de profissionais j√° consolidados entre 4 e 10 anos "
        "de atua√ß√£o no setor de dados."
        ),
    }

dic_graficos = {"Faixa Salarial": ordem_faixas_resumida, "Experi√™ncia": ordem_experiencia}
# %% Distribuicao




if variavel_distribuicao == "Idade":
    # figura
    fig = px.histogram(
        df,
        x=variavel_distribuicao,
        color_discrete_sequence=[cor]
    )
    
    # layout
    fig.update_layout(
        template=template_plotly,
        xaxis_title=variavel_distribuicao,
        yaxis_title="Frequ√™ncia",
        bargap=0.2,    
        paper_bgcolor=template_graph,
        plot_bgcolor=template_graph,
        font=dict(color=template_graph_texto),  # Ensure all text is visible
        xaxis=dict(
            #titlefont=dict(color=template_graph_texto),
            tickfont=dict(color=template_graph_texto)
            ),
        yaxis=dict(
            #titlefont=dict(color=template_graph_texto),
            tickfont=dict(color=template_graph_texto)
            )
        )
    
    st.plotly_chart(fig)

    st.markdown(f"<h3 style='text-align: center'>{variavel_distribuicao}</h3>", unsafe_allow_html=True)

    st.markdown(dic_distribuicao[variavel_distribuicao], unsafe_allow_html=True)
    

else: 
    novo = df.groupby(variavel_distribuicao).size().reset_index(name='Contagem')
    novo['Porcentagem'] = (novo['Contagem'] / novo['Contagem'].sum()) * 100

    novo[variavel_distribuicao] = pd.Categorical(novo[variavel_distribuicao], categories=dic_graficos[variavel_distribuicao], ordered=True)
    novo.sort_values(by=variavel_distribuicao, inplace=True)
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=novo[variavel_distribuicao],  # Categorical x-axis
        y=novo['Contagem'],                 # Bar heights
        text=[f'{p:.1f}%' for p in novo['Porcentagem']],  # Percentages as text
        textposition='outside',             # Position text above bars
        marker_color=cor,
        textfont=dict(color=template_graph_texto)         # Bar color
    ))
        
    # Layout settings
    fig.update_layout(
        template=template_plotly,
        xaxis_title=variavel_distribuicao,
        yaxis_title='Frequ√™ncia',
        xaxis=dict(categoryorder='array', categoryarray=ordem_faixas_resumida,
                   #titlefont=dict(color=template_graph_texto),
                   tickfont=dict(color=template_graph_texto)),  # Enforce custom order
        yaxis=dict(range=[0, novo['Contagem'].max() * 1.1],
                   #titlefont=dict(color=template_graph_texto),
                   tickfont=dict(color=template_graph_texto)), # extendendo um pouco o limite de y
        paper_bgcolor=template_graph,  
        plot_bgcolor=template_graph)
    
    st.plotly_chart(fig)

    st.markdown(f"<h3 style='text-align: center'>{variavel_distribuicao}</h3>", unsafe_allow_html=True)

    st.markdown(dic_distribuicao[variavel_distribuicao], unsafe_allow_html=True)

# %% Outros graficos (pizza ou barras)

layout = [cor, template_graph_texto, template_graph, template_plotly]

st.markdown("""
    <div style="text-align: center;">
        <h1> Outros Gr√°ficos </h1>
""", unsafe_allow_html=True)

grafico_escolhido = st.selectbox('Escolha o tipo de gr√°fico que voc√™ deseja!',
                                    ['üìä Barras üìä', 'üçï Pizza üçï'])


# dicionario com as interepreta√ß√µes dos graficos de pizza
dic_texto = {
    "Etnia": (
        "A an√°lise da etnia dos profissionais tamb√©m revela um panorama interessante. "
        "A maioria dos indiv√≠duos na base se identifica como branca, representando 65% (3.414) dos participantes. "
        "Em seguida, pardos e pretos somam 32% (1.668), o que representa menos da metade do n√∫mero de indiv√≠duos identificados como brancos. "
        "Pode-se, assim, afirmar que o mercado de Dados no Brasil est√°, de forma esmagadora, sendo 'dominado' por brancos.<br><br>"
        
        "Por outro lado, as etnias amarela e ind√≠gena t√™m uma presen√ßa mais modesta, representando apenas 3% (159) dos profissionais, "
        "o que pode refletir um padr√£o demogr√°fico mais restrito, ainda em processo de inclus√£o em √°reas mais tecnol√≥gicas."
    ),
    "G√™nero": (
        "A distribui√ß√£o de g√™nero no mercado de dados no Brasil √© predominantemente masculina, com 75% (3.905 profissionais) "
        "se identificando como homens, enquanto 24% (1.293 profissionais) s√£o mulheres. "
        "A presen√ßa de profissionais que se identificam com outro g√™nero √© bastante pequena, representando apenas 1% (9 profissionais) da base. "
        "Isso indica uma disparidade significativa entre os g√™neros, com a maioria dos cargos ainda sendo ocupada por homens."
    ),
    "Escolaridade": (
        "Em rela√ß√£o √† escolaridade, a base de profissionais apresenta uma diversidade interessante. "
        "34% (1.818) dos indiv√≠duos possuem p√≥s-gradua√ß√£o, destacando o alto n√≠vel de especializa√ß√£o presente no mercado de dados. "
        "Esse n√∫mero √© similar ao de profissionais com gradua√ß√£o (tamb√©m 34%, ou 1.798), mostrando que a forma√ß√£o superior continua sendo "
        "um pr√©-requisito essencial, tanto para cargos de an√°lise quanto para cargos mais t√©cnicos.<br><br>"
        
        "Por outro lado, 2% (105) dos profissionais n√£o possuem gradua√ß√£o, uma porcentagem pequena, mas que pode indicar a presen√ßa de "
        "profissionais com trajet√≥rias n√£o convencionais ou autodidatas, especialmente em campos t√©cnicos onde a experi√™ncia pr√°tica "
        "muitas vezes suplanta a forma√ß√£o acad√™mica formal. J√° os PhDs ou Doutores representam 4% (210) da base, o que reflete a presen√ßa "
        "de especialistas com um n√≠vel de forma√ß√£o avan√ßado, muitas vezes voltados para pesquisas, desenvolvimento de novos m√©todos ou "
        "inova√ß√µes na √°rea de dados."
    ),
    "N√≠vel": (
        "A distribui√ß√£o dos n√≠veis de experi√™ncia no mercado de dados no Brasil √© bastante equilibrada, com *20% (1.046 profissionais)* "
        "em cargos *juniores*, **27% (1.419 profissionais)* em cargos *s√™niores*, **26% (1.419 profissionais)* em cargos *plenos* e "
        "*27% (1.436 profissionais)* em cargos *NA*. O fato de haver uma quantidade equivalente de profissionais em cargos **plenos* e "
        "*s√™niores* √© surpreendente, indicando que a √°rea de dados n√£o s√≥ est√° em constante renova√ß√£o, mas tamb√©m mant√©m um bom equil√≠brio "
        "entre profissionais com menos e mais experi√™ncia, refletindo uma estabilidade na estrutura de carreiras dentro do setor.<br><br>"
        
        "Al√©m disso, a presen√ßa de 27% (1.436 profissionais) com valores faltantes (NA) √© uma quest√£o relevante, pois indica uma lacuna "
        "significativa nas informa√ß√µes sobre o n√≠vel de experi√™ncia de uma parte expressiva dos profissionais. Essa falta de dados claros "
        "prejudica a an√°lise precisa do perfil do mercado, tornando dif√≠cil entender a real composi√ß√£o das carreiras no setor."
    ),
    "Cargo": (
        "Devido √† similaridade entre algumas profiss√µes, ou por conveni√™ncia devido √† baixa frequ√™ncia de observa√ß√µes, agrupamos as profiss√µes "
        "em categorias conforme apresentado na tabela ap√≥s o texto. "
        "Quase 50% (1 647) dos profissionais dessa base ocupam o cargo de Analista de Dados, o que mostra como essa profiss√£o tem se destacado "
        "e se tornado essencial √† medida que mais empresas investem em dados para tomar decis√µes estrat√©gicas.<br><br>"
        
        "Por outro lado, Estat√≠sticos e Economistas s√£o as profiss√µes com a menor representatividade, somando menos de 1% da base (26) ‚Äì uma evid√™ncia "
        "de que o mercado tem se concentrado mais em habilidades voltadas para a pr√°tica e o uso de dados no dia a dia das empresas.<br><br>"
        
        "√â interessante notar que, juntos, os cargos de Engenheiro de Dados e Cientista de Dados quase chegam ao n√∫mero de Analistas de Dados (1 605). "
        "Essa tr√≠ade ‚Äì Analistas, Engenheiros e Cientistas de Dados ‚Äì responde por mais de 80% da base (3 248), o que revela uma clara tend√™ncia: "
        "o mercado est√° cada vez mais centrado em profissionais que dominam o universo dos dados, seja para analis√°-los, estrutur√°-los "
        "ou transform√°-los em insights valiosos."
    )
}



va_outros = st.selectbox('Escolha uma vari√°vel para o gr√°fico:',
                                    sorted(['Etnia', 'G√™nero', 'Escolaridade', 'N√≠vel', 'Cargo']))

if grafico_escolhido == 'üìä Barras üìä':
    st.markdown("""
        <div style="text-align: center;">
            <h1>Gr√°ficos de barras! üìä </h1>
    """, unsafe_allow_html=True)
    st.markdown(f"<h3 style='text-align: center'> üìä Gr√°fico para {va_outros} üìä </h3>", unsafe_allow_html=True)
elif grafico_escolhido == 'üçï Pizza üçï':
    st.markdown("""
        <div style="text-align: center;">
            <h1>Gr√°ficos de pizza!üòãüçï</h1>
    """, unsafe_allow_html=True)
    st.markdown(f"<h3 style='text-align: center'> üçï Gr√°fico para {va_outros} üçï </h3>", unsafe_allow_html=True)

if va_outros == 'Cargo':
    
    agrupar_cargo = st.selectbox('Voc√™ deseja agrupar os cargos?',
                                        ['N√£o', 'Sim'])
    
    if agrupar_cargo == 'N√£o':
        if grafico_escolhido == 'üçï Pizza üçï': 
            fig = px.pie(df, values="Contagem", names=va_outros)
            fig.update_layout(template=template_plotly,
                paper_bgcolor=template_graph,
                plot_bgcolor=template_graph)
            #fig.update_layout(title_x=0.5)
            st.plotly_chart(fig)
    
            # Centered title for va_outros
            st.markdown(f"<h3 style='text-align: center'>{va_outros}</h3>", unsafe_allow_html=True)
    
            # Display dictionary content with line breaks
        elif grafico_escolhido == 'üìä Barras üìä':
            grafico_barras_ordenado(df, va_outros, va_outros, layout=layout, rotation=0, ha='center')
            
        st.markdown("O gr√°fico apresenta a distribui√ß√£o de diferentes cargos ocupados por profissionais da √°rea de dados, destacando a frequ√™ncia relativa "
                "de cada posi√ß√£o. Observa-se que os cargos mais comuns s√£o Analista de Dados, que representa 23,5% das ocorr√™ncias, seguido por "
                "Cientista de Dados (17,8%) e 'Engenheiro de Dados/Data Engineer' (17,7%). Outras posi√ß√µes, como Analista de BI/BI Analyst "
                "(13,1%) e Engenheiro de BI/BI Engineer (6,8%), tamb√©m apresentam relev√¢ncia significativa, sendo bastante semelhantes com a profiss√£o de "
                "Analista de Dados. √Ä medida que avan√ßamos no gr√°fico, a frequ√™ncia de outros cargos Administrador de Banco de Dados, Economista "
                ", Estat√≠stico (etc...) diminui consideravelmente, indicando que profissionais com esses cargos s√£o menos comuns dentro do setor"
                , unsafe_allow_html=True)     
    
    elif agrupar_cargo == "Sim":
        analista = ['Analista de Neg√≥cios/Business Analyst', 'Analista de BI/BI Analyst', 'Analista de Dados/Data Analyst', 'Analista de Intelig√™ncia de Mercado/Market Intelligence']
        cientista = ['Cientista de Dados/Data Scientist', 'Engenheiro de Machine Learning/ML Engineer/AI Engineer']
        engenheiro = ['Engenheiro de Dados/Arquiteto de Dados/Data Engineer/Data Architect', 'DBA/Administrador de Banco de Dados', 'Analytics Engineer']
        ti = ['Analista de Suporte/Analista T√©cnico', 'Desenvolvedor/ Engenheiro de Software/ Analista de Sistemas']
        outro = ['Outra Op√ß√£o', 'Outras Engenharias (n√£o inclui dev)']
        EE = ['Economista', 'Estat√≠stico']
        prof = ['Professor/Pesquisador']
        manager = ['Data Product Manager/ Product Manager (PM/APM/DPM/GPM/PO)']
        
        cargo_original = df['Cargo'].value_counts().reset_index(name='Contagem')
        cargo_original.columns = ['Cargo', 'Contagem']
        
        def categorizar_cargo(cargo):
            if cargo in analista:
                return 'Analista de Dados'
            elif cargo in cientista:
                return 'Cientista de Dados'
            elif cargo in engenheiro:
                return 'Engenheiro de Dados'
            elif cargo in ti:
                return 'Software'
            elif cargo in outro:
                return 'Outra Op√ß√£o'
            elif cargo in EE:
                return 'EE'
            elif cargo in prof:
                return 'Professor/Pesquisador'
            elif cargo in manager:
                return 'Gerente'
            else:
                return 'Outros'
    
        cargo_original['Categoria'] = cargo_original['Cargo'].apply(categorizar_cargo)
        cargo_show = cargo_original.copy()
        # Adicionando uma linha de total
        total_linhas = cargo_original['Contagem'].sum()
        total_row = pd.DataFrame([['Total', total_linhas, 'Total']], columns=['Cargo', 'Contagem', 'Categoria'])
        cargo_original = pd.concat([cargo_original, total_row], ignore_index=True)
    
        # Ordenando a tabela pela coluna 'Categoria' (segunda coluna)
        cargo_original = cargo_original.sort_values(by='Categoria', ascending=True)
    
        # Reorganizando as colunas para que 'Contagem' seja a √∫ltima
        cargo_original = cargo_original[['Cargo', 'Categoria', 'Contagem']]
        
        # Substituindo os cargos para as categorias simplificadas
        df['Cargo'] = df['Cargo'].replace(analista, 'Analista de Dados')
        df['Cargo'] = df['Cargo'].replace(cientista, 'Cientista de Dados')
        df['Cargo'] = df['Cargo'].replace(engenheiro, 'Engenheiro de Dados')
        df['Cargo'] = df['Cargo'].replace(ti, 'Software')
        df['Cargo'] = df['Cargo'].replace(outro, 'Outra Op√ß√£o')
        df['Cargo'] = df['Cargo'].replace(EE, 'EE')
        df['Cargo'] = df['Cargo'].replace(manager, 'Gerente')
    
        # Calculando a contagem de cada cargo ap√≥s as substitui√ß√µes
        cargo_contagem = df.groupby('Cargo')['Cargo'].count().reset_index(name='Contagem')

        if grafico_escolhido == 'üìä Barras üìä':
            grafico_barras_ordenado(df, va_outros, va_outros, layout=layout, rotation=0, ha='center')
        
        if grafico_escolhido == 'üçï Pizza üçï':
            fig = px.pie(cargo_contagem, values="Contagem", names="Cargo")
            fig.update_layout(template=template_plotly,
                paper_bgcolor=template_graph,
                plot_bgcolor=template_graph)
            
            st.plotly_chart(fig)
        st.subheader("Tabela com Quantidades Originais de Cargos")
        st.dataframe(cargo_show[['Cargo', 'Categoria', 'Contagem']], hide_index=True)
        
        st.markdown(f"<h3 style='text-align: center'>{va_outros}</h3>", unsafe_allow_html=True)
        
            # Display dictionary content with line breaks
        st.markdown(dic_texto[va_outros], unsafe_allow_html=True)


else: 
    # Pie chart
    if grafico_escolhido == 'üçï Pizza üçï':
        fig = px.pie(df, values="Contagem", names=va_outros)
        fig.update_layout(template=template_plotly,
            paper_bgcolor=template_graph,
            plot_bgcolor=template_graph)
        #fig.update_layout(title_x=0.5)
        st.plotly_chart(fig)
    

    if grafico_escolhido == 'üìä Barras üìä': 
        grafico_barras_ordenado(df, va_outros, va_outros, layout=layout, rotation=0, ha='center')
        
        
    st.markdown(f"<h3 style='text-align: center'>{va_outros}</h3>", unsafe_allow_html=True)
    
    st.markdown(dic_texto[va_outros], unsafe_allow_html=True)